(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :rlimit 300000000)
(set-option :smt.macro_finder true)

;; Prelude

;; AIR prelude

(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(declare-sort Dummy 0)
(declare-fun no_arg () Dummy)
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-fun D (Dummy) Poly)
(declare-fun %D (Poly) Dummy)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-const DUMMY Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (Fun) Fun)
(declare-fun const_int (Type) Int)
(axiom (forall ((b Bool)) (!
   (has_type (B b) BOOL)
   :pattern ((has_type (B b) BOOL))
   :qid prelude_has_type_bool
   :skolemid skolem_prelude_has_type_bool
)))
(axiom (forall ((x Bool)) (!
   (= x (%B (B x)))
   :pattern ((B x))
   :qid prelude_unbox_box_bool
   :skolemid skolem_prelude_unbox_box_bool
)))
(axiom (forall ((x Poly)) (!
   (=>
    (has_type x BOOL)
    (= x (B (%B x)))
   )
   :pattern ((has_type x BOOL))
   :qid prelude_box_unbox_bool
   :skolemid skolem_prelude_box_unbox_bool
)))
(declare-const SZ Int)
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)

;; MODULE 'module EPRProof'
(set-option :smt.mbqi true)

;; Fuel
(declare-const fuel%delmap_epr!EPRModel.impl&%0.erase. FuelId)
(declare-const fuel%delmap_epr!EPRModel.impl&%0.erase_unbounded. FuelId)
(declare-const fuel%delmap_epr!EPRModel.impl&%0.set. FuelId)
(declare-const fuel%delmap_epr!EPRModel.impl&%0.contains. FuelId)
(declare-const fuel%delmap_epr!EPRModel.impl&%0.g_l_b. FuelId)
(declare-const fuel%delmap_epr!EPRModel.impl&%1.new. FuelId)
(declare-const fuel%delmap_epr!EPRModel.impl&%1.get. FuelId)
(declare-const fuel%delmap_epr!EPRModel.impl&%1.get_internal. FuelId)
(declare-const fuel%delmap_epr!EPRModel.impl&%1.set. FuelId)
(declare-const fuel%delmap_epr!EPRModel.impl&%1.set_unbounded. FuelId)
(declare-const fuel%delmap_epr!EPRProof.dmap_invariant. FuelId)

;; Datatypes
(declare-datatypes ((tuple%0. 0)) (((tuple%0./tuple%0))))
(declare-fun TYPE%delmap_epr!EPRModel.SOMapModel. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%delmap_epr!EPRModel.DMapModel. (Dcr Type Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)

;; Traits

;; Function-Decl delmap_epr::EPRModel::SOMapModel::m
(declare-fun delmap_epr!EPRModel.impl&%0.m.? (Dcr Type Dcr Type Poly Poly Poly) Bool)

;; Function-Decl delmap_epr::EPRModel::SOMapModel::gap
(declare-fun delmap_epr!EPRModel.impl&%0.gap.? (Dcr Type Dcr Type Poly Poly Poly)
 Bool
)

;; Function-Decl delmap_epr::EPRModel::SOMapModel::erase
(declare-fun delmap_epr!EPRModel.impl&%0.erase.? (Dcr Type Dcr Type Poly Poly Poly
  Poly
 ) Bool
)

;; Function-Decl delmap_epr::EPRModel::SOMapModel::erase_unbounded
(declare-fun delmap_epr!EPRModel.impl&%0.erase_unbounded.? (Dcr Type Dcr Type Poly
  Poly Poly
 ) Bool
)

;; Function-Decl delmap_epr::EPRModel::SOMapModel::set
(declare-fun delmap_epr!EPRModel.impl&%0.set.? (Dcr Type Dcr Type Poly Poly Poly Poly)
 Bool
)

;; Function-Decl delmap_epr::EPRModel::SOMapModel::contains
(declare-fun delmap_epr!EPRModel.impl&%0.contains.? (Dcr Type Dcr Type Poly Poly)
 Bool
)

;; Function-Decl delmap_epr::EPRModel::SOMapModel::g_l_b
(declare-fun delmap_epr!EPRModel.impl&%0.g_l_b.? (Dcr Type Dcr Type Poly Poly Poly)
 Bool
)

;; Function-Decl delmap_epr::EPRModel::DMapModel::m
(declare-fun delmap_epr!EPRModel.impl&%1.m.? (Dcr Type Dcr Type Poly Poly Poly) Bool)

;; Function-Decl delmap_epr::EPRModel::DMapModel::lows
(declare-fun delmap_epr!EPRModel.impl&%1.lows.? (Dcr Type Dcr Type Poly) Poly)

;; Function-Decl delmap_epr::EPRModel::DMapModel::new
(declare-fun delmap_epr!EPRModel.impl&%1.new.? (Dcr Type Dcr Type Poly Poly) Bool)

;; Function-Decl delmap_epr::EPRModel::DMapModel::get
(declare-fun delmap_epr!EPRModel.impl&%1.get.? (Dcr Type Dcr Type Poly Poly Poly)
 Bool
)

;; Function-Decl delmap_epr::EPRModel::DMapModel::get_internal
(declare-fun delmap_epr!EPRModel.impl&%1.get_internal.? (Dcr Type Dcr Type Poly Poly
  Poly Poly
 ) Bool
)

;; Function-Decl delmap_epr::EPRModel::DMapModel::set
(declare-fun delmap_epr!EPRModel.impl&%1.set.? (Dcr Type Dcr Type Poly Poly Poly Poly
  Poly Poly Poly Poly Poly
 ) Bool
)

;; Function-Decl delmap_epr::EPRModel::DMapModel::set_unbounded
(declare-fun delmap_epr!EPRModel.impl&%1.set_unbounded.? (Dcr Type Dcr Type Poly Poly
  Poly Poly Poly
 ) Bool
)

;; Function-Decl delmap_epr::EPRModel::key_zero
(declare-fun delmap_epr!EPRModel.key_zero.? (Dcr Type) Poly)

;; Function-Decl delmap_epr::EPRModel::key_le
(declare-fun delmap_epr!EPRModel.key_le.? (Dcr Type Poly Poly) Bool)

;; Function-Decl delmap_epr::EPRProof::dmap_invariant
(declare-fun delmap_epr!EPRProof.dmap_invariant.? (Dcr Type Dcr Type Poly) Bool)

;; Function-Axioms delmap_epr::EPRModel::DMapModel::lows
(axiom (forall ((K&. Dcr) (K& Type) (ID&. Dcr) (ID& Type) (self~2@ Poly)) (!
   (=>
    (has_type self~2@ (TYPE%delmap_epr!EPRModel.DMapModel. K&. K& ID&. ID&))
    (has_type (delmap_epr!EPRModel.impl&%1.lows.? K&. K& ID&. ID& self~2@) (TYPE%delmap_epr!EPRModel.SOMapModel.
      K&. K& ID&. ID&
   )))
   :pattern ((delmap_epr!EPRModel.impl&%1.lows.? K&. K& ID&. ID& self~2@))
   :qid internal_delmap_epr!EPRModel.impl&__1.lows.?_pre_post_definition
   :skolemid skolem_internal_delmap_epr!EPRModel.impl&__1.lows.?_pre_post_definition
)))

;; Function-Axioms delmap_epr::EPRModel::key_zero
(axiom (forall ((K&. Dcr) (K& Type)) (!
   (has_type (delmap_epr!EPRModel.key_zero.? K&. K&) K&)
   :pattern ((delmap_epr!EPRModel.key_zero.? K&. K&))
   :qid internal_delmap_epr!EPRModel.key_zero.?_pre_post_definition
   :skolemid skolem_internal_delmap_epr!EPRModel.key_zero.?_pre_post_definition
)))


;; Function-Specs delmap_epr::EPRModel::SOMapModel::map_properties
(declare-fun ens%delmap_epr!EPRModel.impl&%0.map_properties. (Dcr Type Dcr Type Poly)
 Bool
)
(axiom (forall ((K&. Dcr) (K& Type) (ID&. Dcr) (ID& Type) (self~2@ Poly)) (!
   (= (ens%delmap_epr!EPRModel.impl&%0.map_properties. K&. K& ID&. ID& self~2@) (forall
     ((k~16$ Poly) (id_1~18$ Poly) (id_2~20$ Poly)) (!
      (=>
       (and
        (has_type k~16$ K&)
        (has_type id_1~18$ ID&)
        (has_type id_2~20$ ID&)
       )
       (=>
        (and
         (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& self~2@ k~16$ id_1~18$)
         (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& self~2@ k~16$ id_2~20$)
        )
        (= id_1~18$ id_2~20$)
      ))
      :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& self~2@ k~16$ id_1~18$)
       (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& self~2@ k~16$ id_2~20$)
      )
      :qid user_delmap_epr__EPRModel__SOMapModel__map_properties_0
      :skolemid skolem_user_delmap_epr__EPRModel__SOMapModel__map_properties_0
   )))
   :pattern ((ens%delmap_epr!EPRModel.impl&%0.map_properties. K&. K& ID&. ID& self~2@))
   :qid internal_ens__delmap_epr!EPRModel.impl&__0.map_properties._definition
   :skolemid skolem_internal_ens__delmap_epr!EPRModel.impl&__0.map_properties._definition
)))

;; Function-Specs delmap_epr::EPRModel::SOMapModel::gap_properties
(declare-fun ens%delmap_epr!EPRModel.impl&%0.gap_properties. (Dcr Type Dcr Type Poly)
 Bool
)
(axiom (forall ((K&. Dcr) (K& Type) (ID&. Dcr) (ID& Type) (self~2@ Poly)) (!
   (= (ens%delmap_epr!EPRModel.impl&%0.gap_properties. K&. K& ID&. ID& self~2@) (and
     (forall ((w~16$ Poly) (x~18$ Poly) (y~20$ Poly) (z~22$ Poly)) (!
       (=>
        (and
         (has_type w~16$ K&)
         (has_type x~18$ K&)
         (has_type y~20$ K&)
         (has_type z~22$ K&)
        )
        (=>
         (and
          (and
           (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& self~2@ w~16$ x~18$)
           (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& self~2@ y~20$ z~22$)
          )
          (not (delmap_epr!EPRModel.key_le.? K&. K& x~18$ y~20$))
         )
         (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& self~2@ w~16$ z~22$)
       ))
       :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& self~2@ w~16$ x~18$)
        (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& self~2@ y~20$ z~22$)
       )
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& x~18$ y~20$) (delmap_epr!EPRModel.impl&%0.gap.?
         K&. K& ID&. ID& self~2@ w~16$ z~22$
       ))
       :qid user_delmap_epr__EPRModel__SOMapModel__gap_properties_1
       :skolemid skolem_user_delmap_epr__EPRModel__SOMapModel__gap_properties_1
     ))
     (forall ((w~73$ Poly) (x~75$ Poly) (y~77$ Poly) (z~79$ Poly)) (!
       (=>
        (and
         (has_type w~73$ K&)
         (has_type x~75$ K&)
         (has_type y~77$ K&)
         (has_type z~79$ K&)
        )
        (=>
         (and
          (and
           (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& self~2@ w~73$ x~75$)
           (delmap_epr!EPRModel.key_le.? K&. K& w~73$ y~77$)
          )
          (delmap_epr!EPRModel.key_le.? K&. K& z~79$ x~75$)
         )
         (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& self~2@ y~77$ z~79$)
       ))
       :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& self~2@ w~73$ x~75$)
        (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& self~2@ y~77$ z~79$)
       )
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& w~73$ y~77$) (delmap_epr!EPRModel.key_le.?
         K&. K& z~79$ x~75$
       ))
       :qid user_delmap_epr__EPRModel__SOMapModel__gap_properties_2
       :skolemid skolem_user_delmap_epr__EPRModel__SOMapModel__gap_properties_2
     ))
     (forall ((l~128$ Poly) (k~130$ Poly) (m~132$ Poly) (id~134$ Poly)) (!
       (=>
        (and
         (has_type l~128$ K&)
         (has_type k~130$ K&)
         (has_type m~132$ K&)
         (has_type id~134$ ID&)
        )
        (=>
         (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& self~2@ k~130$ m~132$)
         (not (and
           (and
            (not (delmap_epr!EPRModel.key_le.? K&. K& l~128$ k~130$))
            (not (delmap_epr!EPRModel.key_le.? K&. K& m~132$ l~128$))
           )
           (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& self~2@ l~128$ id~134$)
       ))))
       :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& self~2@ k~130$ m~132$)
        (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& self~2@ l~128$ id~134$)
       )
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& l~128$ k~130$) (delmap_epr!EPRModel.key_le.?
         K&. K& m~132$ l~128$
        ) (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& self~2@ l~128$ id~134$)
       )
       :qid user_delmap_epr__EPRModel__SOMapModel__gap_properties_3
       :skolemid skolem_user_delmap_epr__EPRModel__SOMapModel__gap_properties_3
   ))))
   :pattern ((ens%delmap_epr!EPRModel.impl&%0.gap_properties. K&. K& ID&. ID& self~2@))
   :qid internal_ens__delmap_epr!EPRModel.impl&__0.gap_properties._definition
   :skolemid skolem_internal_ens__delmap_epr!EPRModel.impl&__0.gap_properties._definition
)))

;; Function-Specs delmap_epr::EPRModel::DMapModel::map_properties
(declare-fun ens%delmap_epr!EPRModel.impl&%1.map_properties. (Dcr Type Dcr Type Poly)
 Bool
)
(axiom (forall ((K&. Dcr) (K& Type) (ID&. Dcr) (ID& Type) (self~2@ Poly)) (!
   (= (ens%delmap_epr!EPRModel.impl&%1.map_properties. K&. K& ID&. ID& self~2@) (forall
     ((k~16$ Poly) (id_1~18$ Poly) (id_2~20$ Poly)) (!
      (=>
       (and
        (has_type k~16$ K&)
        (has_type id_1~18$ ID&)
        (has_type id_2~20$ ID&)
       )
       (=>
        (and
         (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& self~2@ k~16$ id_1~18$)
         (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& self~2@ k~16$ id_2~20$)
        )
        (= id_1~18$ id_2~20$)
      ))
      :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& self~2@ k~16$ id_1~18$)
       (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& self~2@ k~16$ id_2~20$)
      )
      :qid user_delmap_epr__EPRModel__DMapModel__map_properties_4
      :skolemid skolem_user_delmap_epr__EPRModel__DMapModel__map_properties_4
   )))
   :pattern ((ens%delmap_epr!EPRModel.impl&%1.map_properties. K&. K& ID&. ID& self~2@))
   :qid internal_ens__delmap_epr!EPRModel.impl&__1.map_properties._definition
   :skolemid skolem_internal_ens__delmap_epr!EPRModel.impl&__1.map_properties._definition
)))

;; Function-Specs delmap_epr::EPRModel::key_le_properties
(declare-fun ens%delmap_epr!EPRModel.key_le_properties. (Dcr Type) Bool)
(axiom (forall ((K&. Dcr) (K& Type)) (!
   (= (ens%delmap_epr!EPRModel.key_le_properties. K&. K&) (and
     (forall ((x~14$ Poly)) (!
       (=>
        (has_type x~14$ K&)
        (delmap_epr!EPRModel.key_le.? K&. K& (delmap_epr!EPRModel.key_zero.? K&. K&) x~14$)
       )
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& (delmap_epr!EPRModel.key_zero.? K&. K&)
         x~14$
       ))
       :qid user_delmap_epr__EPRModel__key_le_properties_5
       :skolemid skolem_user_delmap_epr__EPRModel__key_le_properties_5
     ))
     (forall ((x~32$ Poly)) (!
       (=>
        (has_type x~32$ K&)
        (delmap_epr!EPRModel.key_le.? K&. K& x~32$ x~32$)
       )
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& x~32$ x~32$))
       :qid user_delmap_epr__EPRModel__key_le_properties_6
       :skolemid skolem_user_delmap_epr__EPRModel__key_le_properties_6
     ))
     (forall ((x~49$ Poly) (y~51$ Poly) (z~53$ Poly)) (!
       (=>
        (and
         (has_type x~49$ K&)
         (has_type y~51$ K&)
         (has_type z~53$ K&)
        )
        (=>
         (and
          (delmap_epr!EPRModel.key_le.? K&. K& x~49$ y~51$)
          (delmap_epr!EPRModel.key_le.? K&. K& y~51$ z~53$)
         )
         (delmap_epr!EPRModel.key_le.? K&. K& x~49$ z~53$)
       ))
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& x~49$ y~51$) (delmap_epr!EPRModel.key_le.?
         K&. K& y~51$ z~53$
       ))
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& x~49$ y~51$) (delmap_epr!EPRModel.key_le.?
         K&. K& x~49$ z~53$
       ))
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& y~51$ z~53$) (delmap_epr!EPRModel.key_le.?
         K&. K& x~49$ z~53$
       ))
       :qid user_delmap_epr__EPRModel__key_le_properties_7
       :skolemid skolem_user_delmap_epr__EPRModel__key_le_properties_7
     ))
     (forall ((x~94$ Poly) (y~96$ Poly)) (!
       (=>
        (and
         (has_type x~94$ K&)
         (has_type y~96$ K&)
        )
        (=>
         (and
          (delmap_epr!EPRModel.key_le.? K&. K& x~94$ y~96$)
          (delmap_epr!EPRModel.key_le.? K&. K& y~96$ x~94$)
         )
         (= x~94$ y~96$)
       ))
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& x~94$ y~96$))
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& y~96$ x~94$))
       :qid user_delmap_epr__EPRModel__key_le_properties_8
       :skolemid skolem_user_delmap_epr__EPRModel__key_le_properties_8
     ))
     (forall ((x~137$ Poly) (y~139$ Poly)) (!
       (=>
        (and
         (has_type x~137$ K&)
         (has_type y~139$ K&)
        )
        (or
         (delmap_epr!EPRModel.key_le.? K&. K& x~137$ y~139$)
         (delmap_epr!EPRModel.key_le.? K&. K& y~139$ x~137$)
       ))
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& x~137$ y~139$))
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& y~139$ x~137$))
       :qid user_delmap_epr__EPRModel__key_le_properties_9
       :skolemid skolem_user_delmap_epr__EPRModel__key_le_properties_9
   ))))
   :pattern ((ens%delmap_epr!EPRModel.key_le_properties. K&. K&))
   :qid internal_ens__delmap_epr!EPRModel.key_le_properties._definition
   :skolemid skolem_internal_ens__delmap_epr!EPRModel.key_le_properties._definition
)))

;; Function-Specs delmap_epr::EPRProof::get_postcondition
(declare-fun req%delmap_epr!EPRProof.get_postcondition. (Dcr Type Dcr Type Poly Poly
  Poly
 ) Bool
)
(axiom (forall ((K&. Dcr) (K& Type) (ID&. Dcr) (ID& Type) (dm~2@ Poly) (k~4@ Poly) (
    id~6@ Poly
   )
  ) (!
   (= (req%delmap_epr!EPRProof.get_postcondition. K&. K& ID&. ID& dm~2@ k~4@ id~6@) (
     and
     (axiom_location ("failed precondition") (and
       (and
        (and
         (exists ((id~13$ Poly)) (!
           (and
            (has_type id~13$ ID&)
            (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm~2@
             ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
           ))
           :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm~2@
             ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
           ))
           :qid user_delmap_epr__EPRProof__get_postcondition_10
           :skolemid skolem_user_delmap_epr__EPRProof__get_postcondition_10
         ))
         (forall ((k~34$ Poly)) (!
           (=>
            (has_type k~34$ K&)
            (exists ((id~42$ Poly)) (!
              (and
               (has_type id~42$ ID&)
               (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~34$ id~42$)
              )
              :qid user_delmap_epr__EPRProof__get_postcondition_11
              :skolemid skolem_user_delmap_epr__EPRProof__get_postcondition_11
           )))
           :qid user_delmap_epr__EPRProof__get_postcondition_12
           :skolemid skolem_user_delmap_epr__EPRProof__get_postcondition_12
        )))
        (forall ((k~60$ Poly) (id~62$ Poly)) (!
          (=>
           (and
            (has_type k~60$ K&)
            (has_type id~62$ ID&)
           )
           (=>
            (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm~2@
             ) k~60$ id~62$
            )
            (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~60$ id~62$)
          ))
          :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm~2@
            ) k~60$ id~62$
          ))
          :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~60$ id~62$))
          :qid user_delmap_epr__EPRProof__get_postcondition_13
          :skolemid skolem_user_delmap_epr__EPRProof__get_postcondition_13
       )))
       (forall ((i~95$ Poly) (j~97$ Poly) (id_1~99$ Poly) (id_2~101$ Poly)) (!
         (=>
          (and
           (has_type i~95$ K&)
           (has_type j~97$ K&)
           (has_type id_1~99$ ID&)
           (has_type id_2~101$ ID&)
          )
          (=>
           (and
            (and
             (and
              (and
               (delmap_epr!EPRModel.key_le.? K&. K& i~95$ j~97$)
               (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                 K&. K& ID&. ID& dm~2@
                ) i~95$ id_1~99$
              ))
              (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ j~97$ id_2~101$)
             )
             (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
               K&. K& ID&. ID& dm~2@
              ) i~95$ j~97$
            ))
            (not (= id_1~99$ id_2~101$))
           )
           (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm~2@
            ) j~97$ id_2~101$
         )))
         :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) i~95$ id_1~99$
          ) (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ j~97$ id_2~101$)
         )
         :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) i~95$ id_1~99$
          ) (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) j~97$ id_2~101$
         ))
         :qid user_delmap_epr__EPRProof__get_postcondition_14
         :skolemid skolem_user_delmap_epr__EPRProof__get_postcondition_14
     ))))
     (axiom_location ("failed precondition") (exists ((glb~14$ Poly)) (!
        (and
         (has_type glb~14$ K&)
         (and
          (and
           (and
            (and
             (delmap_epr!EPRModel.key_le.? K&. K& glb~14$ k~4@)
             (exists ((id~24$ Poly)) (!
               (and
                (has_type id~24$ ID&)
                (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                  K&. K& ID&. ID& dm~2@
                 ) glb~14$ id~24$
               ))
               :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                  K&. K& ID&. ID& dm~2@
                 ) glb~14$ id~24$
               ))
               :qid user_delmap_epr__EPRProof__get_postcondition_15
               :skolemid skolem_user_delmap_epr__EPRProof__get_postcondition_15
            )))
            (=>
             (exists ((id~46$ Poly)) (!
               (and
                (has_type id~46$ ID&)
                (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                  K&. K& ID&. ID& dm~2@
                 ) k~4@ id~46$
               ))
               :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                  K&. K& ID&. ID& dm~2@
                 ) k~4@ id~46$
               ))
               :qid user_delmap_epr__EPRProof__get_postcondition_16
               :skolemid skolem_user_delmap_epr__EPRProof__get_postcondition_16
             ))
             (= glb~14$ k~4@)
           ))
           (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm~2@
            ) glb~14$ k~4@
          ))
          (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) glb~14$ id~6@
        )))
        :pattern ((delmap_epr!EPRModel.key_le.? K&. K& glb~14$ k~4@))
        :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm~2@
          ) glb~14$ k~4@
        ))
        :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm~2@
          ) glb~14$ id~6@
        ))
        :qid user_delmap_epr__EPRProof__get_postcondition_17
        :skolemid skolem_user_delmap_epr__EPRProof__get_postcondition_17
   )))))
   :pattern ((req%delmap_epr!EPRProof.get_postcondition. K&. K& ID&. ID& dm~2@ k~4@ id~6@))
   :qid internal_req__delmap_epr!EPRProof.get_postcondition._definition
   :skolemid skolem_internal_req__delmap_epr!EPRProof.get_postcondition._definition
)))
(declare-fun ens%delmap_epr!EPRProof.get_postcondition. (Dcr Type Dcr Type Poly Poly
  Poly
 ) Bool
)
(axiom (forall ((K&. Dcr) (K& Type) (ID&. Dcr) (ID& Type) (dm~2@ Poly) (k~4@ Poly) (
    id~6@ Poly
   )
  ) (!
   (= (ens%delmap_epr!EPRProof.get_postcondition. K&. K& ID&. ID& dm~2@ k~4@ id~6@) (
     delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~4@ id~6@
   ))
   :pattern ((ens%delmap_epr!EPRProof.get_postcondition. K&. K& ID&. ID& dm~2@ k~4@ id~6@))
   :qid internal_ens__delmap_epr!EPRProof.get_postcondition._definition
   :skolemid skolem_internal_ens__delmap_epr!EPRProof.get_postcondition._definition
)))

;; Function-Def delmap_epr::EPRProof::get_postcondition
;; /Users/andreal1/Src/verus-systems-code/ivy/delmap_epr.rs:1113:5: 1113:111 (#0)
(check-valid
 (declare-const K&. Dcr)
 (declare-const K& Type)
 (declare-const ID&. Dcr)
 (declare-const ID& Type)
 (declare-const dm~2@ Poly)
 (declare-const k~4@ Poly)
 (declare-const id~6@ Poly)
 (declare-const tmp%1@ Poly)
 (declare-const tmp%2@ Poly)
 (axiom (has_type dm~2@ (TYPE%delmap_epr!EPRModel.DMapModel. K&. K& ID&. ID&)))
 (axiom (has_type k~4@ K&))
 (axiom (has_type id~6@ ID&))
 (axiom (and
   (and
    (and
     (exists ((id~13$ Poly)) (!
       (and
        (has_type id~13$ ID&)
        (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
       ))
       :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
       ))
       :qid user_delmap_epr__EPRProof__get_postcondition_18
       :skolemid skolem_user_delmap_epr__EPRProof__get_postcondition_18
     ))
     (forall ((k~34$ Poly)) (!
       (=>
        (has_type k~34$ K&)
        (exists ((id~42$ Poly)) (!
          (and
           (has_type id~42$ ID&)
           (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~34$ id~42$)
          )
          :qid user_delmap_epr__EPRProof__get_postcondition_19
          :skolemid skolem_user_delmap_epr__EPRProof__get_postcondition_19
       )))
       :qid user_delmap_epr__EPRProof__get_postcondition_20
       :skolemid skolem_user_delmap_epr__EPRProof__get_postcondition_20
    )))
    (forall ((k~60$ Poly) (id~62$ Poly)) (!
      (=>
       (and
        (has_type k~60$ K&)
        (has_type id~62$ ID&)
       )
       (=>
        (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) k~60$ id~62$
        )
        (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~60$ id~62$)
      ))
      :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm~2@
        ) k~60$ id~62$
      ))
      :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~60$ id~62$))
      :qid user_delmap_epr__EPRProof__get_postcondition_21
      :skolemid skolem_user_delmap_epr__EPRProof__get_postcondition_21
   )))
   (forall ((i~95$ Poly) (j~97$ Poly) (id_1~99$ Poly) (id_2~101$ Poly)) (!
     (=>
      (and
       (has_type i~95$ K&)
       (has_type j~97$ K&)
       (has_type id_1~99$ ID&)
       (has_type id_2~101$ ID&)
      )
      (=>
       (and
        (and
         (and
          (and
           (delmap_epr!EPRModel.key_le.? K&. K& i~95$ j~97$)
           (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm~2@
            ) i~95$ id_1~99$
          ))
          (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ j~97$ id_2~101$)
         )
         (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm~2@
          ) i~95$ j~97$
        ))
        (not (= id_1~99$ id_2~101$))
       )
       (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm~2@
        ) j~97$ id_2~101$
     )))
     :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
        K&. K& ID&. ID& dm~2@
       ) i~95$ id_1~99$
      ) (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ j~97$ id_2~101$)
     )
     :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
        K&. K& ID&. ID& dm~2@
       ) i~95$ id_1~99$
      ) (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
        K&. K& ID&. ID& dm~2@
       ) j~97$ id_2~101$
     ))
     :qid user_delmap_epr__EPRProof__get_postcondition_22
     :skolemid skolem_user_delmap_epr__EPRProof__get_postcondition_22
 ))))
 (axiom (exists ((glb~14$ Poly)) (!
    (and
     (has_type glb~14$ K&)
     (and
      (and
       (and
        (and
         (delmap_epr!EPRModel.key_le.? K&. K& glb~14$ k~4@)
         (exists ((id~24$ Poly)) (!
           (and
            (has_type id~24$ ID&)
            (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm~2@
             ) glb~14$ id~24$
           ))
           :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm~2@
             ) glb~14$ id~24$
           ))
           :qid user_delmap_epr__EPRProof__get_postcondition_23
           :skolemid skolem_user_delmap_epr__EPRProof__get_postcondition_23
        )))
        (=>
         (exists ((id~46$ Poly)) (!
           (and
            (has_type id~46$ ID&)
            (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm~2@
             ) k~4@ id~46$
           ))
           :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm~2@
             ) k~4@ id~46$
           ))
           :qid user_delmap_epr__EPRProof__get_postcondition_24
           :skolemid skolem_user_delmap_epr__EPRProof__get_postcondition_24
         ))
         (= glb~14$ k~4@)
       ))
       (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm~2@
        ) glb~14$ k~4@
      ))
      (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
        K&. K& ID&. ID& dm~2@
       ) glb~14$ id~6@
    )))
    :pattern ((delmap_epr!EPRModel.key_le.? K&. K& glb~14$ k~4@))
    :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
       K&. K& ID&. ID& dm~2@
      ) glb~14$ k~4@
    ))
    :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
       K&. K& ID&. ID& dm~2@
      ) glb~14$ id~6@
    ))
    :qid user_delmap_epr__EPRProof__get_postcondition_25
    :skolemid skolem_user_delmap_epr__EPRProof__get_postcondition_25
 )))
 (block
  (block
   (assume
    (ens%delmap_epr!EPRModel.key_le_properties. K&. K&)
  ))
  (assume
   (= tmp%1@ (delmap_epr!EPRModel.impl&%1.lows.? K&. K& ID&. ID& dm~2@))
  )
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%0.gap_properties. K&. K& ID&. ID& tmp%1@)
  ))
  (assume
   (= tmp%2@ (delmap_epr!EPRModel.impl&%1.lows.? K&. K& ID&. ID& dm~2@))
  )
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%0.map_properties. K&. K& ID&. ID& tmp%2@)
  ))
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%1.map_properties. K&. K& ID&. ID& dm~2@)
  ))
  (assert
   ("postcondition not satisfied" "at the end of the function body" "failed this postcondition")
   (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~4@ id~6@)
)))

;; Function-Specs delmap_epr::EPRProof::new_preserves_inv
(declare-fun req%delmap_epr!EPRProof.new_preserves_inv. (Dcr Type Dcr Type Poly Poly)
 Bool
)
(axiom (forall ((K&. Dcr) (K& Type) (ID&. Dcr) (ID& Type) (dm~2@ Poly) (id_zero~4@ Poly))
  (!
   (= (req%delmap_epr!EPRProof.new_preserves_inv. K&. K& ID&. ID& dm~2@ id_zero~4@) (
     axiom_location ("failed precondition") (and
      (and
       (forall ((k~14$ Poly) (id~16$ Poly)) (!
         (=>
          (and
           (has_type k~14$ K&)
           (has_type id~16$ ID&)
          )
          (= (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~14$ id~16$) (= id~16$ id_zero~4@))
         )
         :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~14$ id~16$))
         :qid user_delmap_epr__EPRProof__new_preserves_inv_26
         :skolemid skolem_user_delmap_epr__EPRProof__new_preserves_inv_26
       ))
       (forall ((k~48$ Poly) (id~50$ Poly)) (!
         (=>
          (and
           (has_type k~48$ K&)
           (has_type id~50$ ID&)
          )
          (= (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm~2@
            ) k~48$ id~50$
           ) (and
            (= k~48$ (delmap_epr!EPRModel.key_zero.? K&. K&))
            (= id~50$ id_zero~4@)
         )))
         :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) k~48$ id~50$
         ))
         :qid user_delmap_epr__EPRProof__new_preserves_inv_27
         :skolemid skolem_user_delmap_epr__EPRProof__new_preserves_inv_27
      )))
      (forall ((k~97$ Poly) (j~99$ Poly)) (!
        (=>
         (and
          (has_type k~97$ K&)
          (has_type j~99$ K&)
         )
         (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm~2@
          ) k~97$ j~99$
        ))
        :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm~2@
          ) k~97$ j~99$
        ))
        :qid user_delmap_epr__EPRProof__new_preserves_inv_28
        :skolemid skolem_user_delmap_epr__EPRProof__new_preserves_inv_28
   )))))
   :pattern ((req%delmap_epr!EPRProof.new_preserves_inv. K&. K& ID&. ID& dm~2@ id_zero~4@))
   :qid internal_req__delmap_epr!EPRProof.new_preserves_inv._definition
   :skolemid skolem_internal_req__delmap_epr!EPRProof.new_preserves_inv._definition
)))
(declare-fun ens%delmap_epr!EPRProof.new_preserves_inv. (Dcr Type Dcr Type Poly Poly)
 Bool
)
(axiom (forall ((K&. Dcr) (K& Type) (ID&. Dcr) (ID& Type) (dm~2@ Poly) (id_zero~4@ Poly))
  (!
   (= (ens%delmap_epr!EPRProof.new_preserves_inv. K&. K& ID&. ID& dm~2@ id_zero~4@) (
     and
     (and
      (and
       (exists ((id~13$ Poly)) (!
         (and
          (has_type id~13$ ID&)
          (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
         ))
         :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
         ))
         :qid user_delmap_epr__EPRProof__new_preserves_inv_29
         :skolemid skolem_user_delmap_epr__EPRProof__new_preserves_inv_29
       ))
       (forall ((k~34$ Poly)) (!
         (=>
          (has_type k~34$ K&)
          (exists ((id~42$ Poly)) (!
            (and
             (has_type id~42$ ID&)
             (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~34$ id~42$)
            )
            :qid user_delmap_epr__EPRProof__new_preserves_inv_30
            :skolemid skolem_user_delmap_epr__EPRProof__new_preserves_inv_30
         )))
         :qid user_delmap_epr__EPRProof__new_preserves_inv_31
         :skolemid skolem_user_delmap_epr__EPRProof__new_preserves_inv_31
      )))
      (forall ((k~60$ Poly) (id~62$ Poly)) (!
        (=>
         (and
          (has_type k~60$ K&)
          (has_type id~62$ ID&)
         )
         (=>
          (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) k~60$ id~62$
          )
          (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~60$ id~62$)
        ))
        :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm~2@
          ) k~60$ id~62$
        ))
        :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~60$ id~62$))
        :qid user_delmap_epr__EPRProof__new_preserves_inv_32
        :skolemid skolem_user_delmap_epr__EPRProof__new_preserves_inv_32
     )))
     (forall ((i~95$ Poly) (j~97$ Poly) (id_1~99$ Poly) (id_2~101$ Poly)) (!
       (=>
        (and
         (has_type i~95$ K&)
         (has_type j~97$ K&)
         (has_type id_1~99$ ID&)
         (has_type id_2~101$ ID&)
        )
        (=>
         (and
          (and
           (and
            (and
             (delmap_epr!EPRModel.key_le.? K&. K& i~95$ j~97$)
             (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
               K&. K& ID&. ID& dm~2@
              ) i~95$ id_1~99$
            ))
            (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ j~97$ id_2~101$)
           )
           (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm~2@
            ) i~95$ j~97$
          ))
          (not (= id_1~99$ id_2~101$))
         )
         (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm~2@
          ) j~97$ id_2~101$
       )))
       :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) i~95$ id_1~99$
        ) (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ j~97$ id_2~101$)
       )
       :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) i~95$ id_1~99$
        ) (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) j~97$ id_2~101$
       ))
       :qid user_delmap_epr__EPRProof__new_preserves_inv_33
       :skolemid skolem_user_delmap_epr__EPRProof__new_preserves_inv_33
   ))))
   :pattern ((ens%delmap_epr!EPRProof.new_preserves_inv. K&. K& ID&. ID& dm~2@ id_zero~4@))
   :qid internal_ens__delmap_epr!EPRProof.new_preserves_inv._definition
   :skolemid skolem_internal_ens__delmap_epr!EPRProof.new_preserves_inv._definition
)))

;; Function-Def delmap_epr::EPRProof::new_preserves_inv
;; /Users/andreal1/Src/verus-systems-code/ivy/delmap_epr.rs:1128:5: 1128:108 (#0)
(check-valid
 (declare-const K&. Dcr)
 (declare-const K& Type)
 (declare-const ID&. Dcr)
 (declare-const ID& Type)
 (declare-const dm~2@ Poly)
 (declare-const id_zero~4@ Poly)
 (axiom (has_type dm~2@ (TYPE%delmap_epr!EPRModel.DMapModel. K&. K& ID&. ID&)))
 (axiom (has_type id_zero~4@ ID&))
 (axiom (and
   (and
    (forall ((k~14$ Poly) (id~16$ Poly)) (!
      (=>
       (and
        (has_type k~14$ K&)
        (has_type id~16$ ID&)
       )
       (= (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~14$ id~16$) (= id~16$ id_zero~4@))
      )
      :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~14$ id~16$))
      :qid user_delmap_epr__EPRProof__new_preserves_inv_39
      :skolemid skolem_user_delmap_epr__EPRProof__new_preserves_inv_39
    ))
    (forall ((k~48$ Poly) (id~50$ Poly)) (!
      (=>
       (and
        (has_type k~48$ K&)
        (has_type id~50$ ID&)
       )
       (= (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) k~48$ id~50$
        ) (and
         (= k~48$ (delmap_epr!EPRModel.key_zero.? K&. K&))
         (= id~50$ id_zero~4@)
      )))
      :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm~2@
        ) k~48$ id~50$
      ))
      :qid user_delmap_epr__EPRProof__new_preserves_inv_40
      :skolemid skolem_user_delmap_epr__EPRProof__new_preserves_inv_40
   )))
   (forall ((k~97$ Poly) (j~99$ Poly)) (!
     (=>
      (and
       (has_type k~97$ K&)
       (has_type j~99$ K&)
      )
      (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
        K&. K& ID&. ID& dm~2@
       ) k~97$ j~99$
     ))
     :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
        K&. K& ID&. ID& dm~2@
       ) k~97$ j~99$
     ))
     :qid user_delmap_epr__EPRProof__new_preserves_inv_41
     :skolemid skolem_user_delmap_epr__EPRProof__new_preserves_inv_41
 ))))
 (assert
  ("postcondition not satisfied" "at the end of the function body" "failed this postcondition")
  (and
   (and
    (and
     (exists ((id~13$ Poly)) (!
       (and
        (has_type id~13$ ID&)
        (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
       ))
       :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
       ))
       :qid user_delmap_epr__EPRProof__new_preserves_inv_34
       :skolemid skolem_user_delmap_epr__EPRProof__new_preserves_inv_34
     ))
     (forall ((k~34$ Poly)) (!
       (=>
        (has_type k~34$ K&)
        (exists ((id~42$ Poly)) (!
          (and
           (has_type id~42$ ID&)
           (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~34$ id~42$)
          )
          :qid user_delmap_epr__EPRProof__new_preserves_inv_35
          :skolemid skolem_user_delmap_epr__EPRProof__new_preserves_inv_35
       )))
       :qid user_delmap_epr__EPRProof__new_preserves_inv_36
       :skolemid skolem_user_delmap_epr__EPRProof__new_preserves_inv_36
    )))
    (forall ((k~60$ Poly) (id~62$ Poly)) (!
      (=>
       (and
        (has_type k~60$ K&)
        (has_type id~62$ ID&)
       )
       (=>
        (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) k~60$ id~62$
        )
        (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~60$ id~62$)
      ))
      :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm~2@
        ) k~60$ id~62$
      ))
      :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~60$ id~62$))
      :qid user_delmap_epr__EPRProof__new_preserves_inv_37
      :skolemid skolem_user_delmap_epr__EPRProof__new_preserves_inv_37
   )))
   (forall ((i~95$ Poly) (j~97$ Poly) (id_1~99$ Poly) (id_2~101$ Poly)) (!
     (=>
      (and
       (has_type i~95$ K&)
       (has_type j~97$ K&)
       (has_type id_1~99$ ID&)
       (has_type id_2~101$ ID&)
      )
      (=>
       (and
        (and
         (and
          (and
           (delmap_epr!EPRModel.key_le.? K&. K& i~95$ j~97$)
           (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm~2@
            ) i~95$ id_1~99$
          ))
          (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ j~97$ id_2~101$)
         )
         (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm~2@
          ) i~95$ j~97$
        ))
        (not (= id_1~99$ id_2~101$))
       )
       (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm~2@
        ) j~97$ id_2~101$
     )))
     :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
        K&. K& ID&. ID& dm~2@
       ) i~95$ id_1~99$
      ) (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ j~97$ id_2~101$)
     )
     :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
        K&. K& ID&. ID& dm~2@
       ) i~95$ id_1~99$
      ) (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
        K&. K& ID&. ID& dm~2@
       ) j~97$ id_2~101$
     ))
     :qid user_delmap_epr__EPRProof__new_preserves_inv_38
     :skolemid skolem_user_delmap_epr__EPRProof__new_preserves_inv_38
)))))

;; Function-Specs delmap_epr::EPRProof::set_postcondition
(declare-fun req%delmap_epr!EPRProof.set_postcondition. (Dcr Type Dcr Type Poly Poly
  Poly Poly Poly Poly Poly Poly Poly
 ) Bool
)
(axiom (forall ((K&. Dcr) (K& Type) (ID&. Dcr) (ID& Type) (dm~2@ Poly) (dm_~4@ Poly)
   (lo~6@ Poly) (hi~8@ Poly) (dst~10@ Poly) (hi_id~12@ Poly) (hi_glb~14@ Poly) (lows_1~16@
    Poly
   ) (lows_2~18@ Poly)
  ) (!
   (= (req%delmap_epr!EPRProof.set_postcondition. K&. K& ID&. ID& dm~2@ dm_~4@ lo~6@ hi~8@
     dst~10@ hi_id~12@ hi_glb~14@ lows_1~16@ lows_2~18@
    ) (and
     (axiom_location ("failed precondition") (and
       (and
        (and
         (exists ((id~13$ Poly)) (!
           (and
            (has_type id~13$ ID&)
            (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm~2@
             ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
           ))
           :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm~2@
             ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
           ))
           :qid user_delmap_epr__EPRProof__set_postcondition_42
           :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_42
         ))
         (forall ((k~34$ Poly)) (!
           (=>
            (has_type k~34$ K&)
            (exists ((id~42$ Poly)) (!
              (and
               (has_type id~42$ ID&)
               (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~34$ id~42$)
              )
              :qid user_delmap_epr__EPRProof__set_postcondition_43
              :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_43
           )))
           :qid user_delmap_epr__EPRProof__set_postcondition_44
           :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_44
        )))
        (forall ((k~60$ Poly) (id~62$ Poly)) (!
          (=>
           (and
            (has_type k~60$ K&)
            (has_type id~62$ ID&)
           )
           (=>
            (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm~2@
             ) k~60$ id~62$
            )
            (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~60$ id~62$)
          ))
          :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm~2@
            ) k~60$ id~62$
          ))
          :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~60$ id~62$))
          :qid user_delmap_epr__EPRProof__set_postcondition_45
          :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_45
       )))
       (forall ((i~95$ Poly) (j~97$ Poly) (id_1~99$ Poly) (id_2~101$ Poly)) (!
         (=>
          (and
           (has_type i~95$ K&)
           (has_type j~97$ K&)
           (has_type id_1~99$ ID&)
           (has_type id_2~101$ ID&)
          )
          (=>
           (and
            (and
             (and
              (and
               (delmap_epr!EPRModel.key_le.? K&. K& i~95$ j~97$)
               (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                 K&. K& ID&. ID& dm~2@
                ) i~95$ id_1~99$
              ))
              (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ j~97$ id_2~101$)
             )
             (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
               K&. K& ID&. ID& dm~2@
              ) i~95$ j~97$
            ))
            (not (= id_1~99$ id_2~101$))
           )
           (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm~2@
            ) j~97$ id_2~101$
         )))
         :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) i~95$ id_1~99$
          ) (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ j~97$ id_2~101$)
         )
         :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) i~95$ id_1~99$
          ) (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) j~97$ id_2~101$
         ))
         :qid user_delmap_epr__EPRProof__set_postcondition_46
         :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_46
     ))))
     (axiom_location ("failed precondition") (and
       (and
        (and
         (and
          (and
           (and
            (not (delmap_epr!EPRModel.key_le.? K&. K& hi~8@ lo~6@))
            (and
             (and
              (and
               (and
                (delmap_epr!EPRModel.key_le.? K&. K& hi_glb~14@ hi~8@)
                (exists ((id~24$ Poly)) (!
                  (and
                   (has_type id~24$ ID&)
                   (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                     K&. K& ID&. ID& dm~2@
                    ) hi_glb~14@ id~24$
                  ))
                  :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                     K&. K& ID&. ID& dm~2@
                    ) hi_glb~14@ id~24$
                  ))
                  :qid user_delmap_epr__EPRProof__set_postcondition_47
                  :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_47
               )))
               (=>
                (exists ((id~46$ Poly)) (!
                  (and
                   (has_type id~46$ ID&)
                   (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                     K&. K& ID&. ID& dm~2@
                    ) hi~8@ id~46$
                  ))
                  :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                     K&. K& ID&. ID& dm~2@
                    ) hi~8@ id~46$
                  ))
                  :qid user_delmap_epr__EPRProof__set_postcondition_48
                  :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_48
                ))
                (= hi_glb~14@ hi~8@)
              ))
              (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                K&. K& ID&. ID& dm~2@
               ) hi_glb~14@ hi~8@
             ))
             (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
               K&. K& ID&. ID& dm~2@
              ) hi_glb~14@ hi_id~12@
           )))
           (forall ((k~50$ Poly)) (!
             (=>
              (has_type k~50$ K&)
              (=>
               (and
                (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~50$)
                (not (delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~50$))
               )
               (forall ((id~79$ Poly)) (!
                 (=>
                  (has_type id~79$ ID&)
                  (= (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~50$ id~79$) (= id~79$
                    dst~10@
                 )))
                 :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~50$ id~79$))
                 :qid user_delmap_epr__EPRProof__set_postcondition_49
                 :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_49
             ))))
             :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~50$))
             :pattern ((delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~50$))
             :qid user_delmap_epr__EPRProof__set_postcondition_50
             :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_50
          )))
          (forall ((k~113$ Poly)) (!
            (=>
             (has_type k~113$ K&)
             (=>
              (not (and
                (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~113$)
                (not (delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~113$))
              ))
              (forall ((id~143$ Poly)) (!
                (=>
                 (has_type id~143$ ID&)
                 (= (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~113$ id~143$) (delmap_epr!EPRModel.impl&%1.m.?
                   K&. K& ID&. ID& dm~2@ k~113$ id~143$
                )))
                :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~113$ id~143$))
                :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~113$ id~143$))
                :qid user_delmap_epr__EPRProof__set_postcondition_51
                :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_51
            ))))
            :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~113$))
            :pattern ((delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~113$))
            :qid user_delmap_epr__EPRProof__set_postcondition_52
            :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_52
         )))
         (and
          (forall ((k~17$ Poly) (id~19$ Poly)) (!
            (=>
             (and
              (has_type k~17$ K&)
              (has_type id~19$ ID&)
             )
             (= (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_1~16@ k~17$ id~19$) (ite
               (= hi~8@ k~17$)
               (= id~19$ hi_id~12@)
               (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                 K&. K& ID&. ID& dm~2@
                ) k~17$ id~19$
            ))))
            :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_1~16@ k~17$ id~19$))
            :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
               K&. K& ID&. ID& dm~2@
              ) k~17$ id~19$
            ))
            :qid user_delmap_epr__EPRProof__set_postcondition_53
            :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_53
          ))
          (forall ((x~74$ Poly) (y~76$ Poly)) (!
            (=>
             (and
              (has_type x~74$ K&)
              (has_type y~76$ K&)
             )
             (= (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ x~74$ y~76$) (and
               (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                 K&. K& ID&. ID& dm~2@
                ) x~74$ y~76$
               )
               (not (and
                 (not (delmap_epr!EPRModel.key_le.? K&. K& hi~8@ x~74$))
                 (not (delmap_epr!EPRModel.key_le.? K&. K& y~76$ hi~8@))
            )))))
            :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ x~74$ y~76$))
            :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
               K&. K& ID&. ID& dm~2@
              ) x~74$ y~76$
            ))
            :pattern ((delmap_epr!EPRModel.key_le.? K&. K& hi~8@ x~74$) (delmap_epr!EPRModel.key_le.?
              K&. K& y~76$ hi~8@
            ))
            :qid user_delmap_epr__EPRProof__set_postcondition_54
            :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_54
        ))))
        (and
         (forall ((k~17$ Poly) (id~19$ Poly)) (!
           (=>
            (and
             (has_type k~17$ K&)
             (has_type id~19$ ID&)
            )
            (= (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_2~18@ k~17$ id~19$) (and
              (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_1~16@ k~17$ id~19$)
              (not (and
                (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~17$)
                (not (delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~17$))
           )))))
           :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_2~18@ k~17$ id~19$))
           :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_1~16@ k~17$ id~19$))
           :qid user_delmap_epr__EPRProof__set_postcondition_55
           :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_55
         ))
         (forall ((x~68$ Poly) (y~70$ Poly)) (!
           (=>
            (and
             (has_type x~68$ K&)
             (has_type y~70$ K&)
            )
            (= (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_2~18@ x~68$ y~70$) (or
              (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ x~68$ y~70$)
              (and
               (and
                (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ x~68$ lo~6@)
                (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ hi~8@ y~70$)
               )
               (or
                (delmap_epr!EPRModel.key_le.? K&. K& y~70$ hi~8@)
                (not (exists ((id~12$ Poly)) (!
                   (and
                    (has_type id~12$ ID&)
                    (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_1~16@ hi~8@ id~12$)
                   )
                   :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_1~16@ hi~8@ id~12$))
                   :qid user_delmap_epr__EPRProof__set_postcondition_56
                   :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_56
           ))))))))
           :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_2~18@ x~68$ y~70$))
           :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ x~68$ y~70$))
           :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ x~68$ lo~6@)
            (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ hi~8@ y~70$)
           )
           :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ x~68$ lo~6@)
            (delmap_epr!EPRModel.key_le.? K&. K& y~70$ hi~8@)
           )
           :qid user_delmap_epr__EPRProof__set_postcondition_57
           :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_57
       ))))
       (and
        (forall ((k~17$ Poly) (id~19$ Poly)) (!
          (=>
           (and
            (has_type k~17$ K&)
            (has_type id~19$ ID&)
           )
           (= (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm_~4@
             ) k~17$ id~19$
            ) (ite
             (= lo~6@ k~17$)
             (= id~19$ dst~10@)
             (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_2~18@ k~17$ id~19$)
          )))
          :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm_~4@
            ) k~17$ id~19$
          ))
          :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_2~18@ k~17$ id~19$))
          :qid user_delmap_epr__EPRProof__set_postcondition_58
          :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_58
        ))
        (forall ((x~74$ Poly) (y~76$ Poly)) (!
          (=>
           (and
            (has_type x~74$ K&)
            (has_type y~76$ K&)
           )
           (= (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm_~4@
             ) x~74$ y~76$
            ) (and
             (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_2~18@ x~74$ y~76$)
             (not (and
               (not (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ x~74$))
               (not (delmap_epr!EPRModel.key_le.? K&. K& y~76$ lo~6@))
          )))))
          :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm_~4@
            ) x~74$ y~76$
          ))
          :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_2~18@ x~74$ y~76$))
          :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ x~74$) (delmap_epr!EPRModel.key_le.?
            K&. K& y~76$ lo~6@
          ))
          :qid user_delmap_epr__EPRProof__set_postcondition_59
          :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_59
   )))))))
   :pattern ((req%delmap_epr!EPRProof.set_postcondition. K&. K& ID&. ID& dm~2@ dm_~4@
     lo~6@ hi~8@ dst~10@ hi_id~12@ hi_glb~14@ lows_1~16@ lows_2~18@
   ))
   :qid internal_req__delmap_epr!EPRProof.set_postcondition._definition
   :skolemid skolem_internal_req__delmap_epr!EPRProof.set_postcondition._definition
)))
(declare-fun ens%delmap_epr!EPRProof.set_postcondition. (Dcr Type Dcr Type Poly Poly
  Poly Poly Poly Poly Poly Poly Poly
 ) Bool
)
(axiom (forall ((K&. Dcr) (K& Type) (ID&. Dcr) (ID& Type) (dm~2@ Poly) (dm_~4@ Poly)
   (lo~6@ Poly) (hi~8@ Poly) (dst~10@ Poly) (hi_id~12@ Poly) (hi_glb~14@ Poly) (lows_1~16@
    Poly
   ) (lows_2~18@ Poly)
  ) (!
   (= (ens%delmap_epr!EPRProof.set_postcondition. K&. K& ID&. ID& dm~2@ dm_~4@ lo~6@ hi~8@
     dst~10@ hi_id~12@ hi_glb~14@ lows_1~16@ lows_2~18@
    ) (and
     (forall ((k~64$ Poly)) (!
       (=>
        (has_type k~64$ K&)
        (=>
         (and
          (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~64$)
          (not (delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~64$))
         )
         (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~64$ dst~10@)
       ))
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~64$))
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~64$))
       :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~64$ dst~10@))
       :qid user_delmap_epr__EPRProof__set_postcondition_60
       :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_60
     ))
     (forall ((k~103$ Poly)) (!
       (=>
        (has_type k~103$ K&)
        (=>
         (not (and
           (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~103$)
           (not (delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~103$))
         ))
         (forall ((id~133$ Poly)) (!
           (=>
            (has_type id~133$ ID&)
            (= (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~103$ id~133$) (delmap_epr!EPRModel.impl&%1.m.?
              K&. K& ID&. ID& dm~2@ k~103$ id~133$
           )))
           :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~103$ id~133$))
           :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~103$ id~133$))
           :qid user_delmap_epr__EPRProof__set_postcondition_61
           :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_61
       ))))
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~103$))
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~103$))
       :qid user_delmap_epr__EPRProof__set_postcondition_62
       :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_62
     ))
     (and
      (and
       (and
        (exists ((id~13$ Poly)) (!
          (and
           (has_type id~13$ ID&)
           (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm_~4@
            ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
          ))
          :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm_~4@
            ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
          ))
          :qid user_delmap_epr__EPRProof__set_postcondition_63
          :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_63
        ))
        (forall ((k~34$ Poly)) (!
          (=>
           (has_type k~34$ K&)
           (exists ((id~42$ Poly)) (!
             (and
              (has_type id~42$ ID&)
              (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~34$ id~42$)
             )
             :qid user_delmap_epr__EPRProof__set_postcondition_64
             :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_64
          )))
          :qid user_delmap_epr__EPRProof__set_postcondition_65
          :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_65
       )))
       (forall ((k~60$ Poly) (id~62$ Poly)) (!
         (=>
          (and
           (has_type k~60$ K&)
           (has_type id~62$ ID&)
          )
          (=>
           (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm_~4@
            ) k~60$ id~62$
           )
           (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~60$ id~62$)
         ))
         :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm_~4@
           ) k~60$ id~62$
         ))
         :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~60$ id~62$))
         :qid user_delmap_epr__EPRProof__set_postcondition_66
         :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_66
      )))
      (forall ((i~95$ Poly) (j~97$ Poly) (id_1~99$ Poly) (id_2~101$ Poly)) (!
        (=>
         (and
          (has_type i~95$ K&)
          (has_type j~97$ K&)
          (has_type id_1~99$ ID&)
          (has_type id_2~101$ ID&)
         )
         (=>
          (and
           (and
            (and
             (and
              (delmap_epr!EPRModel.key_le.? K&. K& i~95$ j~97$)
              (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                K&. K& ID&. ID& dm_~4@
               ) i~95$ id_1~99$
             ))
             (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ j~97$ id_2~101$)
            )
            (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm_~4@
             ) i~95$ j~97$
           ))
           (not (= id_1~99$ id_2~101$))
          )
          (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm_~4@
           ) j~97$ id_2~101$
        )))
        :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm_~4@
          ) i~95$ id_1~99$
         ) (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ j~97$ id_2~101$)
        )
        :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm_~4@
          ) i~95$ id_1~99$
         ) (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm_~4@
          ) j~97$ id_2~101$
        ))
        :qid user_delmap_epr__EPRProof__set_postcondition_67
        :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_67
   )))))
   :pattern ((ens%delmap_epr!EPRProof.set_postcondition. K&. K& ID&. ID& dm~2@ dm_~4@
     lo~6@ hi~8@ dst~10@ hi_id~12@ hi_glb~14@ lows_1~16@ lows_2~18@
   ))
   :qid internal_ens__delmap_epr!EPRProof.set_postcondition._definition
   :skolemid skolem_internal_ens__delmap_epr!EPRProof.set_postcondition._definition
)))

;; Function-Def delmap_epr::EPRProof::set_postcondition
;; /Users/andreal1/Src/verus-systems-code/ivy/delmap_epr.rs:1141:5: 1141:218 (#0)
(check-valid
 (declare-const K&. Dcr)
 (declare-const K& Type)
 (declare-const ID&. Dcr)
 (declare-const ID& Type)
 (declare-const dm~2@ Poly)
 (declare-const dm_~4@ Poly)
 (declare-const lo~6@ Poly)
 (declare-const hi~8@ Poly)
 (declare-const dst~10@ Poly)
 (declare-const hi_id~12@ Poly)
 (declare-const hi_glb~14@ Poly)
 (declare-const lows_1~16@ Poly)
 (declare-const lows_2~18@ Poly)
 (declare-const tmp%1@ Poly)
 (declare-const tmp%2@ Poly)
 (declare-const tmp%3@ Poly)
 (declare-const tmp%4@ Poly)
 (axiom (has_type dm~2@ (TYPE%delmap_epr!EPRModel.DMapModel. K&. K& ID&. ID&)))
 (axiom (has_type dm_~4@ (TYPE%delmap_epr!EPRModel.DMapModel. K&. K& ID&. ID&)))
 (axiom (has_type lo~6@ K&))
 (axiom (has_type hi~8@ K&))
 (axiom (has_type dst~10@ ID&))
 (axiom (has_type hi_id~12@ ID&))
 (axiom (has_type hi_glb~14@ K&))
 (axiom (has_type lows_1~16@ (TYPE%delmap_epr!EPRModel.SOMapModel. K&. K& ID&. ID&)))
 (axiom (has_type lows_2~18@ (TYPE%delmap_epr!EPRModel.SOMapModel. K&. K& ID&. ID&)))
 (axiom (and
   (and
    (and
     (exists ((id~13$ Poly)) (!
       (and
        (has_type id~13$ ID&)
        (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
       ))
       :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
       ))
       :qid user_delmap_epr__EPRProof__set_postcondition_76
       :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_76
     ))
     (forall ((k~34$ Poly)) (!
       (=>
        (has_type k~34$ K&)
        (exists ((id~42$ Poly)) (!
          (and
           (has_type id~42$ ID&)
           (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~34$ id~42$)
          )
          :qid user_delmap_epr__EPRProof__set_postcondition_77
          :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_77
       )))
       :qid user_delmap_epr__EPRProof__set_postcondition_78
       :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_78
    )))
    (forall ((k~60$ Poly) (id~62$ Poly)) (!
      (=>
       (and
        (has_type k~60$ K&)
        (has_type id~62$ ID&)
       )
       (=>
        (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) k~60$ id~62$
        )
        (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~60$ id~62$)
      ))
      :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm~2@
        ) k~60$ id~62$
      ))
      :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~60$ id~62$))
      :qid user_delmap_epr__EPRProof__set_postcondition_79
      :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_79
   )))
   (forall ((i~95$ Poly) (j~97$ Poly) (id_1~99$ Poly) (id_2~101$ Poly)) (!
     (=>
      (and
       (has_type i~95$ K&)
       (has_type j~97$ K&)
       (has_type id_1~99$ ID&)
       (has_type id_2~101$ ID&)
      )
      (=>
       (and
        (and
         (and
          (and
           (delmap_epr!EPRModel.key_le.? K&. K& i~95$ j~97$)
           (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm~2@
            ) i~95$ id_1~99$
          ))
          (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ j~97$ id_2~101$)
         )
         (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm~2@
          ) i~95$ j~97$
        ))
        (not (= id_1~99$ id_2~101$))
       )
       (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm~2@
        ) j~97$ id_2~101$
     )))
     :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
        K&. K& ID&. ID& dm~2@
       ) i~95$ id_1~99$
      ) (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ j~97$ id_2~101$)
     )
     :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
        K&. K& ID&. ID& dm~2@
       ) i~95$ id_1~99$
      ) (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
        K&. K& ID&. ID& dm~2@
       ) j~97$ id_2~101$
     ))
     :qid user_delmap_epr__EPRProof__set_postcondition_80
     :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_80
 ))))
 (axiom (and
   (and
    (and
     (and
      (and
       (and
        (not (delmap_epr!EPRModel.key_le.? K&. K& hi~8@ lo~6@))
        (and
         (and
          (and
           (and
            (delmap_epr!EPRModel.key_le.? K&. K& hi_glb~14@ hi~8@)
            (exists ((id~24$ Poly)) (!
              (and
               (has_type id~24$ ID&)
               (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                 K&. K& ID&. ID& dm~2@
                ) hi_glb~14@ id~24$
              ))
              :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                 K&. K& ID&. ID& dm~2@
                ) hi_glb~14@ id~24$
              ))
              :qid user_delmap_epr__EPRProof__set_postcondition_81
              :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_81
           )))
           (=>
            (exists ((id~46$ Poly)) (!
              (and
               (has_type id~46$ ID&)
               (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                 K&. K& ID&. ID& dm~2@
                ) hi~8@ id~46$
              ))
              :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                 K&. K& ID&. ID& dm~2@
                ) hi~8@ id~46$
              ))
              :qid user_delmap_epr__EPRProof__set_postcondition_82
              :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_82
            ))
            (= hi_glb~14@ hi~8@)
          ))
          (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) hi_glb~14@ hi~8@
         ))
         (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm~2@
          ) hi_glb~14@ hi_id~12@
       )))
       (forall ((k~50$ Poly)) (!
         (=>
          (has_type k~50$ K&)
          (=>
           (and
            (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~50$)
            (not (delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~50$))
           )
           (forall ((id~79$ Poly)) (!
             (=>
              (has_type id~79$ ID&)
              (= (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~50$ id~79$) (= id~79$
                dst~10@
             )))
             :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~50$ id~79$))
             :qid user_delmap_epr__EPRProof__set_postcondition_83
             :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_83
         ))))
         :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~50$))
         :pattern ((delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~50$))
         :qid user_delmap_epr__EPRProof__set_postcondition_84
         :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_84
      )))
      (forall ((k~113$ Poly)) (!
        (=>
         (has_type k~113$ K&)
         (=>
          (not (and
            (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~113$)
            (not (delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~113$))
          ))
          (forall ((id~143$ Poly)) (!
            (=>
             (has_type id~143$ ID&)
             (= (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~113$ id~143$) (delmap_epr!EPRModel.impl&%1.m.?
               K&. K& ID&. ID& dm~2@ k~113$ id~143$
            )))
            :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~113$ id~143$))
            :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~113$ id~143$))
            :qid user_delmap_epr__EPRProof__set_postcondition_85
            :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_85
        ))))
        :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~113$))
        :pattern ((delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~113$))
        :qid user_delmap_epr__EPRProof__set_postcondition_86
        :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_86
     )))
     (and
      (forall ((k~17$ Poly) (id~19$ Poly)) (!
        (=>
         (and
          (has_type k~17$ K&)
          (has_type id~19$ ID&)
         )
         (= (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_1~16@ k~17$ id~19$) (ite
           (= hi~8@ k~17$)
           (= id~19$ hi_id~12@)
           (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm~2@
            ) k~17$ id~19$
        ))))
        :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_1~16@ k~17$ id~19$))
        :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm~2@
          ) k~17$ id~19$
        ))
        :qid user_delmap_epr__EPRProof__set_postcondition_87
        :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_87
      ))
      (forall ((x~74$ Poly) (y~76$ Poly)) (!
        (=>
         (and
          (has_type x~74$ K&)
          (has_type y~76$ K&)
         )
         (= (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ x~74$ y~76$) (and
           (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm~2@
            ) x~74$ y~76$
           )
           (not (and
             (not (delmap_epr!EPRModel.key_le.? K&. K& hi~8@ x~74$))
             (not (delmap_epr!EPRModel.key_le.? K&. K& y~76$ hi~8@))
        )))))
        :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ x~74$ y~76$))
        :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm~2@
          ) x~74$ y~76$
        ))
        :pattern ((delmap_epr!EPRModel.key_le.? K&. K& hi~8@ x~74$) (delmap_epr!EPRModel.key_le.?
          K&. K& y~76$ hi~8@
        ))
        :qid user_delmap_epr__EPRProof__set_postcondition_88
        :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_88
    ))))
    (and
     (forall ((k~17$ Poly) (id~19$ Poly)) (!
       (=>
        (and
         (has_type k~17$ K&)
         (has_type id~19$ ID&)
        )
        (= (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_2~18@ k~17$ id~19$) (and
          (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_1~16@ k~17$ id~19$)
          (not (and
            (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~17$)
            (not (delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~17$))
       )))))
       :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_2~18@ k~17$ id~19$))
       :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_1~16@ k~17$ id~19$))
       :qid user_delmap_epr__EPRProof__set_postcondition_89
       :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_89
     ))
     (forall ((x~68$ Poly) (y~70$ Poly)) (!
       (=>
        (and
         (has_type x~68$ K&)
         (has_type y~70$ K&)
        )
        (= (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_2~18@ x~68$ y~70$) (or
          (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ x~68$ y~70$)
          (and
           (and
            (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ x~68$ lo~6@)
            (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ hi~8@ y~70$)
           )
           (or
            (delmap_epr!EPRModel.key_le.? K&. K& y~70$ hi~8@)
            (not (exists ((id~12$ Poly)) (!
               (and
                (has_type id~12$ ID&)
                (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_1~16@ hi~8@ id~12$)
               )
               :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_1~16@ hi~8@ id~12$))
               :qid user_delmap_epr__EPRProof__set_postcondition_90
               :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_90
       ))))))))
       :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_2~18@ x~68$ y~70$))
       :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ x~68$ y~70$))
       :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ x~68$ lo~6@)
        (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ hi~8@ y~70$)
       )
       :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_1~16@ x~68$ lo~6@)
        (delmap_epr!EPRModel.key_le.? K&. K& y~70$ hi~8@)
       )
       :qid user_delmap_epr__EPRProof__set_postcondition_91
       :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_91
   ))))
   (and
    (forall ((k~17$ Poly) (id~19$ Poly)) (!
      (=>
       (and
        (has_type k~17$ K&)
        (has_type id~19$ ID&)
       )
       (= (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm_~4@
         ) k~17$ id~19$
        ) (ite
         (= lo~6@ k~17$)
         (= id~19$ dst~10@)
         (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_2~18@ k~17$ id~19$)
      )))
      :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm_~4@
        ) k~17$ id~19$
      ))
      :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_2~18@ k~17$ id~19$))
      :qid user_delmap_epr__EPRProof__set_postcondition_92
      :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_92
    ))
    (forall ((x~74$ Poly) (y~76$ Poly)) (!
      (=>
       (and
        (has_type x~74$ K&)
        (has_type y~76$ K&)
       )
       (= (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm_~4@
         ) x~74$ y~76$
        ) (and
         (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_2~18@ x~74$ y~76$)
         (not (and
           (not (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ x~74$))
           (not (delmap_epr!EPRModel.key_le.? K&. K& y~76$ lo~6@))
      )))))
      :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm_~4@
        ) x~74$ y~76$
      ))
      :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_2~18@ x~74$ y~76$))
      :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ x~74$) (delmap_epr!EPRModel.key_le.?
        K&. K& y~76$ lo~6@
      ))
      :qid user_delmap_epr__EPRProof__set_postcondition_93
      :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_93
 )))))
 (block
  (block
   (assume
    (ens%delmap_epr!EPRModel.key_le_properties. K&. K&)
  ))
  (assume
   (= tmp%1@ (delmap_epr!EPRModel.impl&%1.lows.? K&. K& ID&. ID& dm~2@))
  )
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%0.gap_properties. K&. K& ID&. ID& tmp%1@)
  ))
  (assume
   (= tmp%2@ (delmap_epr!EPRModel.impl&%1.lows.? K&. K& ID&. ID& dm~2@))
  )
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%0.map_properties. K&. K& ID&. ID& tmp%2@)
  ))
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%1.map_properties. K&. K& ID&. ID& dm~2@)
  ))
  (assume
   (= tmp%3@ (delmap_epr!EPRModel.impl&%1.lows.? K&. K& ID&. ID& dm_~4@))
  )
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%0.gap_properties. K&. K& ID&. ID& tmp%3@)
  ))
  (assume
   (= tmp%4@ (delmap_epr!EPRModel.impl&%1.lows.? K&. K& ID&. ID& dm_~4@))
  )
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%0.map_properties. K&. K& ID&. ID& tmp%4@)
  ))
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%1.map_properties. K&. K& ID&. ID& dm_~4@)
  ))
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%0.map_properties. K&. K& ID&. ID& lows_1~16@)
  ))
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%0.gap_properties. K&. K& ID&. ID& lows_1~16@)
  ))
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%0.map_properties. K&. K& ID&. ID& lows_2~18@)
  ))
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%0.gap_properties. K&. K& ID&. ID& lows_2~18@)
  ))
  (assert
   ("postcondition not satisfied" "at the end of the function body" "failed this postcondition")
   (forall ((k~64$ Poly)) (!
     (=>
      (has_type k~64$ K&)
      (=>
       (and
        (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~64$)
        (not (delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~64$))
       )
       (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~64$ dst~10@)
     ))
     :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~64$))
     :pattern ((delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~64$))
     :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~64$ dst~10@))
     :qid user_delmap_epr__EPRProof__set_postcondition_68
     :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_68
  )))
  (assert
   ("postcondition not satisfied" "at the end of the function body" "failed this postcondition")
   (forall ((k~103$ Poly)) (!
     (=>
      (has_type k~103$ K&)
      (=>
       (not (and
         (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~103$)
         (not (delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~103$))
       ))
       (forall ((id~133$ Poly)) (!
         (=>
          (has_type id~133$ ID&)
          (= (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~103$ id~133$) (delmap_epr!EPRModel.impl&%1.m.?
            K&. K& ID&. ID& dm~2@ k~103$ id~133$
         )))
         :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~103$ id~133$))
         :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~103$ id~133$))
         :qid user_delmap_epr__EPRProof__set_postcondition_69
         :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_69
     ))))
     :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~103$))
     :pattern ((delmap_epr!EPRModel.key_le.? K&. K& hi~8@ k~103$))
     :qid user_delmap_epr__EPRProof__set_postcondition_70
     :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_70
  )))
  (assert
   ("postcondition not satisfied" "at the end of the function body" "failed this postcondition")
   (and
    (and
     (and
      (exists ((id~13$ Poly)) (!
        (and
         (has_type id~13$ ID&)
         (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm_~4@
          ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
        ))
        :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm_~4@
          ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
        ))
        :qid user_delmap_epr__EPRProof__set_postcondition_71
        :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_71
      ))
      (forall ((k~34$ Poly)) (!
        (=>
         (has_type k~34$ K&)
         (exists ((id~42$ Poly)) (!
           (and
            (has_type id~42$ ID&)
            (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~34$ id~42$)
           )
           :qid user_delmap_epr__EPRProof__set_postcondition_72
           :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_72
        )))
        :qid user_delmap_epr__EPRProof__set_postcondition_73
        :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_73
     )))
     (forall ((k~60$ Poly) (id~62$ Poly)) (!
       (=>
        (and
         (has_type k~60$ K&)
         (has_type id~62$ ID&)
        )
        (=>
         (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm_~4@
          ) k~60$ id~62$
         )
         (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~60$ id~62$)
       ))
       :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm_~4@
         ) k~60$ id~62$
       ))
       :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~60$ id~62$))
       :qid user_delmap_epr__EPRProof__set_postcondition_74
       :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_74
    )))
    (forall ((i~95$ Poly) (j~97$ Poly) (id_1~99$ Poly) (id_2~101$ Poly)) (!
      (=>
       (and
        (has_type i~95$ K&)
        (has_type j~97$ K&)
        (has_type id_1~99$ ID&)
        (has_type id_2~101$ ID&)
       )
       (=>
        (and
         (and
          (and
           (and
            (delmap_epr!EPRModel.key_le.? K&. K& i~95$ j~97$)
            (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm_~4@
             ) i~95$ id_1~99$
           ))
           (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ j~97$ id_2~101$)
          )
          (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm_~4@
           ) i~95$ j~97$
         ))
         (not (= id_1~99$ id_2~101$))
        )
        (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm_~4@
         ) j~97$ id_2~101$
      )))
      :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm_~4@
        ) i~95$ id_1~99$
       ) (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ j~97$ id_2~101$)
      )
      :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm_~4@
        ) i~95$ id_1~99$
       ) (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm_~4@
        ) j~97$ id_2~101$
      ))
      :qid user_delmap_epr__EPRProof__set_postcondition_75
      :skolemid skolem_user_delmap_epr__EPRProof__set_postcondition_75
))))))

;; Function-Specs delmap_epr::EPRProof::set_unbounded_postcondition
(declare-fun req%delmap_epr!EPRProof.set_unbounded_postcondition. (Dcr Type Dcr Type
  Poly Poly Poly Poly Poly
 ) Bool
)
(axiom (forall ((K&. Dcr) (K& Type) (ID&. Dcr) (ID& Type) (dm~2@ Poly) (dm_~4@ Poly)
   (lo~6@ Poly) (dst~8@ Poly) (lows_2~10@ Poly)
  ) (!
   (= (req%delmap_epr!EPRProof.set_unbounded_postcondition. K&. K& ID&. ID& dm~2@ dm_~4@
     lo~6@ dst~8@ lows_2~10@
    ) (and
     (axiom_location ("failed precondition") (and
       (and
        (and
         (exists ((id~13$ Poly)) (!
           (and
            (has_type id~13$ ID&)
            (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm~2@
             ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
           ))
           :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm~2@
             ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
           ))
           :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_94
           :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_94
         ))
         (forall ((k~34$ Poly)) (!
           (=>
            (has_type k~34$ K&)
            (exists ((id~42$ Poly)) (!
              (and
               (has_type id~42$ ID&)
               (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~34$ id~42$)
              )
              :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_95
              :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_95
           )))
           :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_96
           :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_96
        )))
        (forall ((k~60$ Poly) (id~62$ Poly)) (!
          (=>
           (and
            (has_type k~60$ K&)
            (has_type id~62$ ID&)
           )
           (=>
            (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm~2@
             ) k~60$ id~62$
            )
            (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~60$ id~62$)
          ))
          :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm~2@
            ) k~60$ id~62$
          ))
          :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~60$ id~62$))
          :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_97
          :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_97
       )))
       (forall ((i~95$ Poly) (j~97$ Poly) (id_1~99$ Poly) (id_2~101$ Poly)) (!
         (=>
          (and
           (has_type i~95$ K&)
           (has_type j~97$ K&)
           (has_type id_1~99$ ID&)
           (has_type id_2~101$ ID&)
          )
          (=>
           (and
            (and
             (and
              (and
               (delmap_epr!EPRModel.key_le.? K&. K& i~95$ j~97$)
               (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                 K&. K& ID&. ID& dm~2@
                ) i~95$ id_1~99$
              ))
              (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ j~97$ id_2~101$)
             )
             (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
               K&. K& ID&. ID& dm~2@
              ) i~95$ j~97$
            ))
            (not (= id_1~99$ id_2~101$))
           )
           (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm~2@
            ) j~97$ id_2~101$
         )))
         :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) i~95$ id_1~99$
          ) (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ j~97$ id_2~101$)
         )
         :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) i~95$ id_1~99$
          ) (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) j~97$ id_2~101$
         ))
         :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_98
         :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_98
     ))))
     (axiom_location ("failed precondition") (and
       (and
        (and
         (forall ((k~21$ Poly)) (!
           (=>
            (has_type k~21$ K&)
            (=>
             (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~21$)
             (forall ((id~41$ Poly)) (!
               (=>
                (has_type id~41$ ID&)
                (= (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~21$ id~41$) (= id~41$
                  dst~8@
               )))
               :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~21$ id~41$))
               :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_99
               :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_99
           ))))
           :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~21$))
           :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_100
           :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_100
         ))
         (forall ((k~75$ Poly)) (!
           (=>
            (has_type k~75$ K&)
            (=>
             (not (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~75$))
             (forall ((id~96$ Poly)) (!
               (=>
                (has_type id~96$ ID&)
                (= (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~75$ id~96$) (delmap_epr!EPRModel.impl&%1.m.?
                  K&. K& ID&. ID& dm~2@ k~75$ id~96$
               )))
               :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~75$ id~96$))
               :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~75$ id~96$))
               :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_101
               :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_101
           ))))
           :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~75$))
           :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_102
           :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_102
        )))
        (and
         (forall ((k~15$ Poly) (id~17$ Poly)) (!
           (=>
            (and
             (has_type k~15$ K&)
             (has_type id~17$ ID&)
            )
            (= (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_2~10@ k~15$ id~17$) (and
              (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                K&. K& ID&. ID& dm~2@
               ) k~15$ id~17$
              )
              (not (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~15$))
           )))
           :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_2~10@ k~15$ id~17$))
           :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm~2@
             ) k~15$ id~17$
           ))
           :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_103
           :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_103
         ))
         (forall ((x~57$ Poly) (y~59$ Poly)) (!
           (=>
            (and
             (has_type x~57$ K&)
             (has_type y~59$ K&)
            )
            (= (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_2~10@ x~57$ y~59$) (or
              (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                K&. K& ID&. ID& dm~2@
               ) x~57$ y~59$
              )
              (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                K&. K& ID&. ID& dm~2@
               ) x~57$ lo~6@
           ))))
           :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_2~10@ x~57$ y~59$))
           :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm~2@
             ) x~57$ y~59$
           ))
           :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_104
           :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_104
       ))))
       (and
        (forall ((k~17$ Poly) (id~19$ Poly)) (!
          (=>
           (and
            (has_type k~17$ K&)
            (has_type id~19$ ID&)
           )
           (= (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm_~4@
             ) k~17$ id~19$
            ) (ite
             (= lo~6@ k~17$)
             (= id~19$ dst~8@)
             (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_2~10@ k~17$ id~19$)
          )))
          :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm_~4@
            ) k~17$ id~19$
          ))
          :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_2~10@ k~17$ id~19$))
          :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_105
          :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_105
        ))
        (forall ((x~74$ Poly) (y~76$ Poly)) (!
          (=>
           (and
            (has_type x~74$ K&)
            (has_type y~76$ K&)
           )
           (= (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm_~4@
             ) x~74$ y~76$
            ) (and
             (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_2~10@ x~74$ y~76$)
             (not (and
               (not (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ x~74$))
               (not (delmap_epr!EPRModel.key_le.? K&. K& y~76$ lo~6@))
          )))))
          :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm_~4@
            ) x~74$ y~76$
          ))
          :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_2~10@ x~74$ y~76$))
          :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ x~74$) (delmap_epr!EPRModel.key_le.?
            K&. K& y~76$ lo~6@
          ))
          :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_106
          :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_106
   )))))))
   :pattern ((req%delmap_epr!EPRProof.set_unbounded_postcondition. K&. K& ID&. ID& dm~2@
     dm_~4@ lo~6@ dst~8@ lows_2~10@
   ))
   :qid internal_req__delmap_epr!EPRProof.set_unbounded_postcondition._definition
   :skolemid skolem_internal_req__delmap_epr!EPRProof.set_unbounded_postcondition._definition
)))
(declare-fun ens%delmap_epr!EPRProof.set_unbounded_postcondition. (Dcr Type Dcr Type
  Poly Poly Poly Poly Poly
 ) Bool
)
(axiom (forall ((K&. Dcr) (K& Type) (ID&. Dcr) (ID& Type) (dm~2@ Poly) (dm_~4@ Poly)
   (lo~6@ Poly) (dst~8@ Poly) (lows_2~10@ Poly)
  ) (!
   (= (ens%delmap_epr!EPRProof.set_unbounded_postcondition. K&. K& ID&. ID& dm~2@ dm_~4@
     lo~6@ dst~8@ lows_2~10@
    ) (and
     (forall ((k~48$ Poly)) (!
       (=>
        (has_type k~48$ K&)
        (=>
         (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~48$)
         (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~48$ dst~8@)
       ))
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~48$))
       :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~48$ dst~8@))
       :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_107
       :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_107
     ))
     (forall ((k~78$ Poly)) (!
       (=>
        (has_type k~78$ K&)
        (=>
         (not (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~78$))
         (forall ((id~99$ Poly)) (!
           (=>
            (has_type id~99$ ID&)
            (= (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~78$ id~99$) (delmap_epr!EPRModel.impl&%1.m.?
              K&. K& ID&. ID& dm~2@ k~78$ id~99$
           )))
           :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~78$ id~99$))
           :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~78$ id~99$))
           :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_108
           :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_108
       ))))
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~78$))
       :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_109
       :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_109
     ))
     (and
      (and
       (and
        (exists ((id~13$ Poly)) (!
          (and
           (has_type id~13$ ID&)
           (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm_~4@
            ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
          ))
          :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm_~4@
            ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
          ))
          :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_110
          :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_110
        ))
        (forall ((k~34$ Poly)) (!
          (=>
           (has_type k~34$ K&)
           (exists ((id~42$ Poly)) (!
             (and
              (has_type id~42$ ID&)
              (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~34$ id~42$)
             )
             :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_111
             :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_111
          )))
          :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_112
          :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_112
       )))
       (forall ((k~60$ Poly) (id~62$ Poly)) (!
         (=>
          (and
           (has_type k~60$ K&)
           (has_type id~62$ ID&)
          )
          (=>
           (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm_~4@
            ) k~60$ id~62$
           )
           (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~60$ id~62$)
         ))
         :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm_~4@
           ) k~60$ id~62$
         ))
         :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~60$ id~62$))
         :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_113
         :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_113
      )))
      (forall ((i~95$ Poly) (j~97$ Poly) (id_1~99$ Poly) (id_2~101$ Poly)) (!
        (=>
         (and
          (has_type i~95$ K&)
          (has_type j~97$ K&)
          (has_type id_1~99$ ID&)
          (has_type id_2~101$ ID&)
         )
         (=>
          (and
           (and
            (and
             (and
              (delmap_epr!EPRModel.key_le.? K&. K& i~95$ j~97$)
              (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
                K&. K& ID&. ID& dm_~4@
               ) i~95$ id_1~99$
             ))
             (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ j~97$ id_2~101$)
            )
            (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm_~4@
             ) i~95$ j~97$
           ))
           (not (= id_1~99$ id_2~101$))
          )
          (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm_~4@
           ) j~97$ id_2~101$
        )))
        :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm_~4@
          ) i~95$ id_1~99$
         ) (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ j~97$ id_2~101$)
        )
        :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm_~4@
          ) i~95$ id_1~99$
         ) (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm_~4@
          ) j~97$ id_2~101$
        ))
        :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_114
        :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_114
   )))))
   :pattern ((ens%delmap_epr!EPRProof.set_unbounded_postcondition. K&. K& ID&. ID& dm~2@
     dm_~4@ lo~6@ dst~8@ lows_2~10@
   ))
   :qid internal_ens__delmap_epr!EPRProof.set_unbounded_postcondition._definition
   :skolemid skolem_internal_ens__delmap_epr!EPRProof.set_unbounded_postcondition._definition
)))

;; Function-Def delmap_epr::EPRProof::set_unbounded_postcondition
;; /Users/andreal1/Src/verus-systems-code/ivy/delmap_epr.rs:1179:5: 1179:170 (#0)
(check-valid
 (declare-const K&. Dcr)
 (declare-const K& Type)
 (declare-const ID&. Dcr)
 (declare-const ID& Type)
 (declare-const dm~2@ Poly)
 (declare-const dm_~4@ Poly)
 (declare-const lo~6@ Poly)
 (declare-const dst~8@ Poly)
 (declare-const lows_2~10@ Poly)
 (declare-const tmp%1@ Poly)
 (declare-const tmp%2@ Poly)
 (declare-const tmp%3@ Poly)
 (declare-const tmp%4@ Poly)
 (axiom (has_type dm~2@ (TYPE%delmap_epr!EPRModel.DMapModel. K&. K& ID&. ID&)))
 (axiom (has_type dm_~4@ (TYPE%delmap_epr!EPRModel.DMapModel. K&. K& ID&. ID&)))
 (axiom (has_type lo~6@ K&))
 (axiom (has_type dst~8@ ID&))
 (axiom (has_type lows_2~10@ (TYPE%delmap_epr!EPRModel.SOMapModel. K&. K& ID&. ID&)))
 (axiom (and
   (and
    (and
     (exists ((id~13$ Poly)) (!
       (and
        (has_type id~13$ ID&)
        (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
       ))
       :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
       ))
       :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_123
       :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_123
     ))
     (forall ((k~34$ Poly)) (!
       (=>
        (has_type k~34$ K&)
        (exists ((id~42$ Poly)) (!
          (and
           (has_type id~42$ ID&)
           (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~34$ id~42$)
          )
          :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_124
          :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_124
       )))
       :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_125
       :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_125
    )))
    (forall ((k~60$ Poly) (id~62$ Poly)) (!
      (=>
       (and
        (has_type k~60$ K&)
        (has_type id~62$ ID&)
       )
       (=>
        (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) k~60$ id~62$
        )
        (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~60$ id~62$)
      ))
      :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm~2@
        ) k~60$ id~62$
      ))
      :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~60$ id~62$))
      :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_126
      :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_126
   )))
   (forall ((i~95$ Poly) (j~97$ Poly) (id_1~99$ Poly) (id_2~101$ Poly)) (!
     (=>
      (and
       (has_type i~95$ K&)
       (has_type j~97$ K&)
       (has_type id_1~99$ ID&)
       (has_type id_2~101$ ID&)
      )
      (=>
       (and
        (and
         (and
          (and
           (delmap_epr!EPRModel.key_le.? K&. K& i~95$ j~97$)
           (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
             K&. K& ID&. ID& dm~2@
            ) i~95$ id_1~99$
          ))
          (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ j~97$ id_2~101$)
         )
         (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm~2@
          ) i~95$ j~97$
        ))
        (not (= id_1~99$ id_2~101$))
       )
       (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm~2@
        ) j~97$ id_2~101$
     )))
     :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
        K&. K& ID&. ID& dm~2@
       ) i~95$ id_1~99$
      ) (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ j~97$ id_2~101$)
     )
     :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
        K&. K& ID&. ID& dm~2@
       ) i~95$ id_1~99$
      ) (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
        K&. K& ID&. ID& dm~2@
       ) j~97$ id_2~101$
     ))
     :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_127
     :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_127
 ))))
 (axiom (and
   (and
    (and
     (forall ((k~21$ Poly)) (!
       (=>
        (has_type k~21$ K&)
        (=>
         (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~21$)
         (forall ((id~41$ Poly)) (!
           (=>
            (has_type id~41$ ID&)
            (= (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~21$ id~41$) (= id~41$
              dst~8@
           )))
           :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~21$ id~41$))
           :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_128
           :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_128
       ))))
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~21$))
       :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_129
       :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_129
     ))
     (forall ((k~75$ Poly)) (!
       (=>
        (has_type k~75$ K&)
        (=>
         (not (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~75$))
         (forall ((id~96$ Poly)) (!
           (=>
            (has_type id~96$ ID&)
            (= (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~75$ id~96$) (delmap_epr!EPRModel.impl&%1.m.?
              K&. K& ID&. ID& dm~2@ k~75$ id~96$
           )))
           :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~75$ id~96$))
           :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~75$ id~96$))
           :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_130
           :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_130
       ))))
       :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~75$))
       :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_131
       :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_131
    )))
    (and
     (forall ((k~15$ Poly) (id~17$ Poly)) (!
       (=>
        (and
         (has_type k~15$ K&)
         (has_type id~17$ ID&)
        )
        (= (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_2~10@ k~15$ id~17$) (and
          (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) k~15$ id~17$
          )
          (not (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~15$))
       )))
       :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_2~10@ k~15$ id~17$))
       :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) k~15$ id~17$
       ))
       :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_132
       :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_132
     ))
     (forall ((x~57$ Poly) (y~59$ Poly)) (!
       (=>
        (and
         (has_type x~57$ K&)
         (has_type y~59$ K&)
        )
        (= (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_2~10@ x~57$ y~59$) (or
          (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) x~57$ y~59$
          )
          (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm~2@
           ) x~57$ lo~6@
       ))))
       :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_2~10@ x~57$ y~59$))
       :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm~2@
         ) x~57$ y~59$
       ))
       :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_133
       :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_133
   ))))
   (and
    (forall ((k~17$ Poly) (id~19$ Poly)) (!
      (=>
       (and
        (has_type k~17$ K&)
        (has_type id~19$ ID&)
       )
       (= (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm_~4@
         ) k~17$ id~19$
        ) (ite
         (= lo~6@ k~17$)
         (= id~19$ dst~8@)
         (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_2~10@ k~17$ id~19$)
      )))
      :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm_~4@
        ) k~17$ id~19$
      ))
      :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& lows_2~10@ k~17$ id~19$))
      :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_134
      :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_134
    ))
    (forall ((x~74$ Poly) (y~76$ Poly)) (!
      (=>
       (and
        (has_type x~74$ K&)
        (has_type y~76$ K&)
       )
       (= (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm_~4@
         ) x~74$ y~76$
        ) (and
         (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_2~10@ x~74$ y~76$)
         (not (and
           (not (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ x~74$))
           (not (delmap_epr!EPRModel.key_le.? K&. K& y~76$ lo~6@))
      )))))
      :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm_~4@
        ) x~74$ y~76$
      ))
      :pattern ((delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& lows_2~10@ x~74$ y~76$))
      :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ x~74$) (delmap_epr!EPRModel.key_le.?
        K&. K& y~76$ lo~6@
      ))
      :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_135
      :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_135
 )))))
 (block
  (block
   (assume
    (ens%delmap_epr!EPRModel.key_le_properties. K&. K&)
  ))
  (assume
   (= tmp%1@ (delmap_epr!EPRModel.impl&%1.lows.? K&. K& ID&. ID& dm~2@))
  )
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%0.gap_properties. K&. K& ID&. ID& tmp%1@)
  ))
  (assume
   (= tmp%2@ (delmap_epr!EPRModel.impl&%1.lows.? K&. K& ID&. ID& dm~2@))
  )
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%0.map_properties. K&. K& ID&. ID& tmp%2@)
  ))
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%1.map_properties. K&. K& ID&. ID& dm~2@)
  ))
  (assume
   (= tmp%3@ (delmap_epr!EPRModel.impl&%1.lows.? K&. K& ID&. ID& dm_~4@))
  )
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%0.gap_properties. K&. K& ID&. ID& tmp%3@)
  ))
  (assume
   (= tmp%4@ (delmap_epr!EPRModel.impl&%1.lows.? K&. K& ID&. ID& dm_~4@))
  )
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%0.map_properties. K&. K& ID&. ID& tmp%4@)
  ))
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%1.map_properties. K&. K& ID&. ID& dm_~4@)
  ))
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%0.map_properties. K&. K& ID&. ID& lows_2~10@)
  ))
  (block
   (assume
    (ens%delmap_epr!EPRModel.impl&%0.gap_properties. K&. K& ID&. ID& lows_2~10@)
  ))
  (assert
   ("postcondition not satisfied" "at the end of the function body" "failed this postcondition")
   (forall ((k~48$ Poly)) (!
     (=>
      (has_type k~48$ K&)
      (=>
       (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~48$)
       (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~48$ dst~8@)
     ))
     :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~48$))
     :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~48$ dst~8@))
     :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_115
     :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_115
  )))
  (assert
   ("postcondition not satisfied" "at the end of the function body" "failed this postcondition")
   (forall ((k~78$ Poly)) (!
     (=>
      (has_type k~78$ K&)
      (=>
       (not (delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~78$))
       (forall ((id~99$ Poly)) (!
         (=>
          (has_type id~99$ ID&)
          (= (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~78$ id~99$) (delmap_epr!EPRModel.impl&%1.m.?
            K&. K& ID&. ID& dm~2@ k~78$ id~99$
         )))
         :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~78$ id~99$))
         :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm~2@ k~78$ id~99$))
         :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_116
         :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_116
     ))))
     :pattern ((delmap_epr!EPRModel.key_le.? K&. K& lo~6@ k~78$))
     :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_117
     :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_117
  )))
  (assert
   ("postcondition not satisfied" "at the end of the function body" "failed this postcondition")
   (and
    (and
     (and
      (exists ((id~13$ Poly)) (!
        (and
         (has_type id~13$ ID&)
         (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm_~4@
          ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
        ))
        :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm_~4@
          ) (delmap_epr!EPRModel.key_zero.? K&. K&) id~13$
        ))
        :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_118
        :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_118
      ))
      (forall ((k~34$ Poly)) (!
        (=>
         (has_type k~34$ K&)
         (exists ((id~42$ Poly)) (!
           (and
            (has_type id~42$ ID&)
            (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~34$ id~42$)
           )
           :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_119
           :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_119
        )))
        :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_120
        :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_120
     )))
     (forall ((k~60$ Poly) (id~62$ Poly)) (!
       (=>
        (and
         (has_type k~60$ K&)
         (has_type id~62$ ID&)
        )
        (=>
         (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
           K&. K& ID&. ID& dm_~4@
          ) k~60$ id~62$
         )
         (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~60$ id~62$)
       ))
       :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm_~4@
         ) k~60$ id~62$
       ))
       :pattern ((delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ k~60$ id~62$))
       :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_121
       :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_121
    )))
    (forall ((i~95$ Poly) (j~97$ Poly) (id_1~99$ Poly) (id_2~101$ Poly)) (!
      (=>
       (and
        (has_type i~95$ K&)
        (has_type j~97$ K&)
        (has_type id_1~99$ ID&)
        (has_type id_2~101$ ID&)
       )
       (=>
        (and
         (and
          (and
           (and
            (delmap_epr!EPRModel.key_le.? K&. K& i~95$ j~97$)
            (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
              K&. K& ID&. ID& dm_~4@
             ) i~95$ id_1~99$
           ))
           (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ j~97$ id_2~101$)
          )
          (delmap_epr!EPRModel.impl&%0.gap.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
            K&. K& ID&. ID& dm_~4@
           ) i~95$ j~97$
         ))
         (not (= id_1~99$ id_2~101$))
        )
        (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
          K&. K& ID&. ID& dm_~4@
         ) j~97$ id_2~101$
      )))
      :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm_~4@
        ) i~95$ id_1~99$
       ) (delmap_epr!EPRModel.impl&%1.m.? K&. K& ID&. ID& dm_~4@ j~97$ id_2~101$)
      )
      :pattern ((delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm_~4@
        ) i~95$ id_1~99$
       ) (delmap_epr!EPRModel.impl&%0.m.? K&. K& ID&. ID& (delmap_epr!EPRModel.impl&%1.lows.?
         K&. K& ID&. ID& dm_~4@
        ) j~97$ id_2~101$
      ))
      :qid user_delmap_epr__EPRProof__set_unbounded_postcondition_122
      :skolemid skolem_user_delmap_epr__EPRProof__set_unbounded_postcondition_122
))))))
